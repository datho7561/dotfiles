# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi


## Path

if ! [[ "$PATH" =~ "$HOME/.local/bin" ]]
then
	PATH="$HOME/.local/bin:$PATH"
fi
if ! [[ "$PATH" =~ "$HOME/bin" ]]
then
	PATH="$HOME/bin:$PATH"
fi
if ! [[ "$PATH" =~ "$HOME/go/bin" ]]
then
	PATH="$HOME/go/bin:$PATH"
fi
if ! [[ "$PATH" =~ "$HOME/.npm-global/bin" ]]
then
	PATH="$HOME/.npm-global/bin:$PATH"
fi
if ! [[ "$PATH" =~ "$HOME/.deno/bin" ]]
then
	PATH="$HOME/.deno/bin:$PATH"
fi
if ! [[ "$PATH" =~ "$HOME/.cargo/bin" ]]
then
	PATH="$HOME/.cargo/bin:$PATH"
fi
if ! [[ "$PATH" =~ "/usr/local/bin" ]]
then
	PATH="/usr/local/bin:$PATH"
fi
export PATH
if ! [[ "$PATH" =~ "$HOME/Scripts" ]]
then
	PATH="$HOME/Scripts:$PATH"
fi
export PATH

## broot

if which broot &> /dev/null
then
	source /home/{{.chezmoi.username}}/.config/broot/launcher/bash/br
fi

## Prompt

if which starship &> /dev/null
then
	eval "$(starship init bash)"
fi

## Aliases

if which exa &> /dev/null
then
	alias ls='exa -1 --icons'
	alias l='ls'
	alias ll='ls -lah'
	alias tree='exa --tree -L'
else
	alias ls='TERM=xterm ls --color=auto'
	alias l='ls'
	alias ll='ls -lah'
fi

if which code &> /dev/null
then
	alias dev='code . -r'
	alias frb='dev'
fi

alias vim='$EDITOR'
alias g='git'
. /usr/share/bash-completion/completions/git
__git_complete_fn=$(complete -p git)
eval "${__git_complete_fn% *} g"
unset __git_complete_fn
alias open='xdg-open'
alias edit='$EDITOR'
alias podrun='podman run --rm -it'

{{ if (eq .chezmoi.username "davthomp") -}}
alias theia='podman run --rm -p 3000:3000 theiaide/theia'
alias mandrel='sdk use java 22.1.0.0.r17-mandrel'
alias graal='sdk use java 22.0.0.2.r17-grl'
alias jdk17='sdk use java 17.0.3-tem'
alias jdk11='sdk use java 11.0.15-tem'
alias jdk8='sdk use java 8.0.332-tem'
{{- end }}

## Functions

weather()
{
	curl wttr.in
}

giffy()
{
	ffmpeg -i $1 -vf "fps=10" -c:v pam -f image2pipe - | convert -delay 10 - -loop 0 -layers optimize $2
}

lock()
{
	swaylock & systemctl suspend
}

npmi()
{
	npm i && npm audit --production
}

{{ if (eq .chezmoi.username "davthomp") -}}
# developer shortcuts for work computer

#  vscode utils
function vscode_get_folder_id () {
	# Only true on Linux
	cn_folder=`readlink -f ${1}`
	inode=`stat --format="%i" "${cn_folder}"`
	echo -n "${cn_folder}${inode}" | md5sum -
}

#  dev xml
bx()
{
	pushd ~/Documents/Projects/vscode-xml
	npm run build-server
	popd
}
bxn()
{
	graal
	pushd ~/Documents/Projects/lemminx
	./mvnw clean package -Dnative -DskipTests
	rm ~/Documents/Projects/vscode-xml/server/lemminx-linux*
	cp ~/Documents/Projects/lemminx/org.eclipse.lemminx/target/lemminx-linux* ~/Documents/Projects/vscode-xml/server
	chmod u+x ~/Documents/Projects/vscode-xml/server/lemminx-linux*
	popd
}
tx()
{
	pushd ~/Documents/Projects/lemminx
	./mvnw verify
	popd
}
bs()
{
	pushd ~/Documents/Projects/lemminx-schematron
	mvn clean package -DskipTests
	cp ~/Documents/Projects/lemminx-schematron/target/lemminx-schematron-*-SNAPSHOT.jar ~/Documents/lemminx-extensions
	popd
}
ts()
{
	pushd ~/Documents/Projects/lemminx-schematron
	mvn clean verify
	popd
}

#  dev lemminx-maven
bv()
{
	pushd ~/Documents/Projects/lemminx-maven/lemminx-maven
	../mvnw clean package
	rm -f ~/Documents/lemminx-extensions/lemminx-maven/*.jar
	rm -f ~/Documents/lemminx-extensions/lemminx-maven/*.zip
	cp ~/Documents/Projects/lemminx-maven/lemminx-maven/target/lemminx-maven-*-SNAPSHOT-zip-with-dependencies.zip ~/Documents/lemminx-extensions/lemminx-maven
	popd
	pushd ~/Documents/lemminx-extensions/lemminx-maven
	unzip *.zip
	popd
}

#  dev quarkus
bq()
{
	pushd ~/Documents/Projects/mp/vscode-quarkus
	npm run build
	popd
}

#  dev microprofile
bm()
{
	pushd ~/Documents/Projects/mp/vscode-microprofile
	npm run build-server
	npm run build-ext
	popd
}
tm()
{
	pushd ~/Documents/Projects/mp/lsp4mp/microprofile.ls/org.eclipse.lsp4mp.ls
	./mvnw test
	popd
}
im()
{
	pushd ~/Documents/Projects/mp/lsp4mp/microprofile.jdt
	./mvnw clean verify
	popd
}
versace()
{
	pushd ~/Documents/Projects/mp/vscode-microprofile
	code --uninstall-extension redhat.vscode-quarkus
	code --uninstall-extension redhat.vscode-microprofile
	rm -f *.vsix
	vsce package
	code --install-extension *.vsix
	popd
}
nukePDE()
{
	rm -rf ~/eclipse-workspace/.metadata/.plugins/org.eclipse.pde.core
}
{{- end }}

{{ if (eq .chezmoi.username "david") -}}
## development shortcuts for local computer
#  dev xml
bx()
{
	pushd ~/Documents/Programming/vscode-xml
	npm run build-server
	popd
}
bxn()
{
	mandrel
	pushd ~/Documents/Programming/lemminx
	./mvnw clean package -Dnative -DskipTests
	cp ~/Documents/Programming/lemminx/org.eclipse.lemminx/target/lemminx-linux* ~/Documents/Programming/vscode-xml/server
	chmod u+x ~/Documents/Programming/vscode-xml/server/lemminx-linux
	popd
}
tx()
{
	pushd ~/Documents/Programming/lemminx
	./mvnw verify
	popd
}

#  dev quarkus
bq()
{
	pushd ~/Documents/Programming/mp/vscode-quarkus
	npm run build
	popd
}
tq()
{
	pushd ~/Documents/Programming/mp/quarkus-ls/quarkus.ls.ext/com.redhat.quarkus.ls
	./mvnw clean verify
	popd
	pushd ~/Documents/Programming/mp/quarkus-ls/quarkus.jdt.ext
	./mvnw clean verify
	popd
}

#  dev microprofile
bm()
{
	pushd ~/Documents/Programming/mp/vscode-microprofile
	npm run build-server
	npm run build-ext
	popd
}
tm()
{
	pushd ~/Documents/Programming/mp/lsp4mp/microprofile.ls/org.eclipse.lsp4mp.ls
	./mvnw test
	popd
}
im()
{
	pushd ~/Documents/Programming/mp/lsp4mp/microprofile.jdt
	./mvnw clean verify
	popd
}
versace()
{
	pushd ~/Documents/Programming/mp/vscode-microprofile
	code --uninstall-extension redhat.vscode-quarkus
	code --uninstall-extension redhat.vscode-microprofile
	rm -f *.vsix
	vsce package
	code --install-extension *.vsix
	popd
}
{{- end }}

## Environment

# "docker"
export DOCKER_HOST=unix:///run/user/${UID}/podman/podman.sock
export TESTCONTAINERS_RYUK_DISABLED=true

# Use the base 16 terminal colors for ls
export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43'
export TERM=xterm-256color # Needed to get vim to work in alacritty
if which nvim &> /dev/null
then
	export EDITOR=nvim
else
	export EDITOR=vim
fi

{{ if (eq .chezmoi.username "davthomp") -}}
export GRAALVM_HOME='/home/davthomp/.sdkman/candidates/java/22.1.0.0.r17-mandrel'
{{- end }}

export DENO_INSTALL="/home/{{ .chezmoi.username }}/.deno"
source "$HOME/.cargo/env"
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
nvm use default &> /dev/null # actually use the nvm default
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/home/{{ .chezmoi.username }}/.sdkman"
[[ -s "/home/{{ .chezmoi.username }}/.sdkman/bin/sdkman-init.sh" ]] && source "/home/{{ .chezmoi.username }}/.sdkman/bin/sdkman-init.sh"
